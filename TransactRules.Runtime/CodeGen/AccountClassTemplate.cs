// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace TransactRules.Runtime.CodeGen
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using TransactRules.Configuration;
    using TransactRules.Runtime;
    using TransactRules.Runtime.Accounts;
    
    
    #line 1 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class AccountClassTemplate : AccountClassTemplateBase
    {
        public virtual string TransformText()
        {
            this.Write(@"
using System;
using System.Linq;
using System.Collections.Generic;
using TransactRules.Core.Utilities;
using TransactRules.Configuration;
using TransactRules.Runtime;
using TransactRules.Runtime.Accounts;
using TransactRules.Runtime.Schedules;
using TransactRules.Runtime.Values;
using TransactRules.Runtime.Rates;


namespace TransactRules.Runtime
{
    public class ");
            
            #line 23 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(":TransactionClient\r\n    {\t\t\r\n\t\tpublic override void Initialize()\r\n\t\t{\r\n");
            
            #line 27 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var scheduleType in Model.ScheduleTypes){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\tSchedule local");
            
            #line 29 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(" = new Schedule();\t\t\r\n\t\t\tlocal");
            
            #line 30 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".ScheduleType = \"");
            
            #line 30 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\tlocal");
            
            #line 31 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".BusinessDayCalculator = Account.BusinessDayCalculator;\r\n");
            
            #line 32 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
 if(scheduleType.IsCalculated){ 
            
            #line default
            #line hidden
            this.Write("\t\t\tSet");
            
            #line 33 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write("CalculatedProperties(local");
            
            #line 33 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write("); \r\n");
            
            #line 34 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
	} else{
            
            #line default
            #line hidden
            this.Write("\t\t\tSet");
            
            #line 35 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write("DefaultProperties(local");
            
            #line 35 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write("); \r\n");
            
            #line 36 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\t\t\tAccount.Schedules.Add(local");
            
            #line 37 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(");\t\t\t\r\n");
            
            #line 38 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  } 
            
            #line default
            #line hidden
            
            #line 39 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var optionType in Model.OptionTypes){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\tOptionValue local");
            
            #line 41 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionType.Name));
            
            #line default
            #line hidden
            this.Write(" = new OptionValue();\t\t\r\n\t\t\tlocal");
            
            #line 42 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionType.Name));
            
            #line default
            #line hidden
            this.Write(".OptionType = \"");
            
            #line 42 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionType.Name));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\tlocal");
            
            #line 43 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionType.Name));
            
            #line default
            #line hidden
            this.Write(".OptionValues = ");
            
            #line 43 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionType.OptionListExpression));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\tAccount.Options.Add(local");
            
            #line 44 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionType.Name));
            
            #line default
            #line hidden
            this.Write(");\t\t\t\r\n");
            
            #line 45 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  } 
            
            #line default
            #line hidden
            
            #line 46 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var rateType in Model.RateTypes){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\tRateValue local");
            
            #line 48 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rateType.Name));
            
            #line default
            #line hidden
            this.Write(" = new RateValue();\t\t\r\n\t\t\tlocal");
            
            #line 49 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rateType.Name));
            
            #line default
            #line hidden
            this.Write(".RateType = \"");
            
            #line 49 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rateType.Name));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\tAccount.Rates.Add(local");
            
            #line 50 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rateType.Name));
            
            #line default
            #line hidden
            this.Write(");\t\t\t\r\n");
            
            #line 51 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t}\r\n\r\n");
            
            #line 55 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var positionType in Model.PositionTypes)
    { 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\tprivate Position _");
            
            #line 58 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(positionType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\r\n\t\tpublic Position ");
            
            #line 60 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(positionType.Name));
            
            #line default
            #line hidden
            this.Write(" { \r\n\t\t\tget{\r\n\t\t\t\tif(_");
            
            #line 62 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(positionType.Name));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\t{\r\n\t\t\t\t\t_");
            
            #line 64 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(positionType.Name));
            
            #line default
            #line hidden
            this.Write(" = Account.GetPosition(\"");
            
            #line 64 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(positionType.Name));
            
            #line default
            #line hidden
            this.Write("\");\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn _");
            
            #line 67 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(positionType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 70 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 72 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var amountType in Model.AmountTypes)
    { 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\tprivate AmountValue _");
            
            #line 75 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(amountType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\r\n\t\tpublic AmountValue ");
            
            #line 77 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(amountType.Name));
            
            #line default
            #line hidden
            this.Write(" { \r\n\t\t\tget{\r\n\t\t\t\tif(_");
            
            #line 79 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(amountType.Name));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\t{\r\n\t\t\t\t\t_");
            
            #line 81 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(amountType.Name));
            
            #line default
            #line hidden
            this.Write(" = Account.GetAmount(\"");
            
            #line 81 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(amountType.Name));
            
            #line default
            #line hidden
            this.Write("\");\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn _");
            
            #line 84 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(amountType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 87 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 89 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var dateType in Model.DateTypes)
    { 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\tprivate DateValue _");
            
            #line 92 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dateType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\r\n\t\tpublic DateValue ");
            
            #line 94 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dateType.Name));
            
            #line default
            #line hidden
            this.Write(" { \r\n\t\t\tget{\r\n\t\t\t\tif(_");
            
            #line 96 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dateType.Name));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\t{\r\n\t\t\t\t\t_");
            
            #line 98 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dateType.Name));
            
            #line default
            #line hidden
            this.Write(" = Account.GetDate(\"");
            
            #line 98 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dateType.Name));
            
            #line default
            #line hidden
            this.Write("\");\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn _");
            
            #line 101 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dateType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 104 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 106 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var optionType in Model.OptionTypes)
    { 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\tprivate OptionValue _");
            
            #line 109 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\r\n\t\tpublic OptionValue ");
            
            #line 111 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionType.Name));
            
            #line default
            #line hidden
            this.Write(" { \r\n\t\t\tget{\r\n\t\t\t\tif(_");
            
            #line 113 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionType.Name));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\t{\r\n\t\t\t\t\t_");
            
            #line 115 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionType.Name));
            
            #line default
            #line hidden
            this.Write(" = Account.GetOption(\"");
            
            #line 115 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionType.Name));
            
            #line default
            #line hidden
            this.Write("\");\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn _");
            
            #line 118 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(optionType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 121 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 123 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var rateType in Model.RateTypes)
    { 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\tprivate RateValue _");
            
            #line 126 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rateType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\r\n\t\tpublic RateValue ");
            
            #line 128 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rateType.Name));
            
            #line default
            #line hidden
            this.Write(" { \r\n\t\t\tget{\r\n\t\t\t\tif(_");
            
            #line 130 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rateType.Name));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\t{\r\n\t\t\t\t\t_");
            
            #line 132 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rateType.Name));
            
            #line default
            #line hidden
            this.Write(" = Account.GetRate(\"");
            
            #line 132 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rateType.Name));
            
            #line default
            #line hidden
            this.Write("\");\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn _");
            
            #line 135 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rateType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 138 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic override void StartOfDay(){\r\n\t\t\tvar valueDate  = SessionState.Current." +
                    "ValueDate;\r\n");
            
            #line 142 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"

	foreach(var scheduledTransaction in Model.ScheduledTransactions.OrderBy(st=>st.Sequence))
	{
		if(scheduledTransaction.Timing == ScheduledTransactionTiming.StartOfDay)
		{if(scheduledTransaction.ScheduleType != null)
		{
            
            #line default
            #line hidden
            this.Write("\t\t\tif(");
            
            #line 148 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduledTransaction.ScheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".IsDue())\r\n");
            
            #line 149 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
		}
		else
		{
            
            #line default
            #line hidden
            this.Write("\t\t\tif(");
            
            #line 152 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduledTransaction.DateType.Name));
            
            #line default
            #line hidden
            this.Write(".IsDue())\r\n");
            
            #line 153 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t{\r\n");
            
            #line 155 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
		if(scheduledTransaction.TransactionType.HasMaximumPrecission)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tvar amount = ");
            
            #line 157 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduledTransaction.AmountExpression));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 158 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
		}
		else
		{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tvar amount = decimal.Round(");
            
            #line 161 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduledTransaction.AmountExpression));
            
            #line default
            #line hidden
            this.Write(",2);\r\n");
            
            #line 162 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
		}
            
            #line default
            #line hidden
            this.Write("\t\t\t\tCreateTransaction(transactionType: \"");
            
            #line 163 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduledTransaction.TransactionType.Name));
            
            #line default
            #line hidden
            this.Write("\", amount: amount);\r\n\t\t\t}\r\n");
            
            #line 165 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
		foreach(var instalmentType in Model.InstalmentTypes)
			if(instalmentType.Timing == ScheduledTransactionTiming.StartOfDay)
			{
            
            #line default
            #line hidden
            this.Write("\t\t\tif(");
            
            #line 168 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write(".ContainsKey(valueDate))\r\n            {\r\n                var instalment = ");
            
            #line 170 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write("[valueDate];\r\n\r\n                CreateTransaction(transactionType: instalment.Tra" +
                    "nsactionType, amount: instalment.Amount);\r\n            }\r\n");
            
            #line 174 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
			}			
		}
	}

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\t\t\r\n\t\tpublic override void EndOfOfDay(){\r\n\t\t\tvar valueDate  = SessionState.C" +
                    "urrent.ValueDate;\r\n");
            
            #line 182 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"

	foreach(var scheduledTransaction in Model.ScheduledTransactions.OrderBy(st=>st.Sequence))
	{
		if(scheduledTransaction.Timing == ScheduledTransactionTiming.EndOfDay)
		{if(scheduledTransaction.ScheduleType != null)
		{
            
            #line default
            #line hidden
            this.Write("\t\t\tif(");
            
            #line 188 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduledTransaction.ScheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".IsDue())\r\n");
            
            #line 189 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
		}
		else
		{
            
            #line default
            #line hidden
            this.Write("\t\t\tif(");
            
            #line 192 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduledTransaction.DateType.Name));
            
            #line default
            #line hidden
            this.Write(".IsDue())\r\n");
            
            #line 193 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t{\r\n");
            
            #line 195 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
		if(scheduledTransaction.TransactionType.HasMaximumPrecission)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tvar amount = ");
            
            #line 197 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduledTransaction.AmountExpression));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 198 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
		}
		else
		{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tvar amount = decimal.Round(");
            
            #line 201 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduledTransaction.AmountExpression));
            
            #line default
            #line hidden
            this.Write(",2);\r\n");
            
            #line 202 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
		}
            
            #line default
            #line hidden
            this.Write("\t\t\t\tCreateTransaction(transactionType: \"");
            
            #line 203 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduledTransaction.TransactionType.Name));
            
            #line default
            #line hidden
            this.Write("\", amount: amount);\r\n\t\t\t}\r\n");
            
            #line 205 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
		foreach(var instalmentType in Model.InstalmentTypes)
			if(instalmentType.Timing == ScheduledTransactionTiming.EndOfDay)
			{
            
            #line default
            #line hidden
            this.Write("\t\t\tif(");
            
            #line 208 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write(".ContainsKey(valueDate))\r\n            {\r\n                var instalment = ");
            
            #line 210 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write("[valueDate];\r\n\r\n                CreateTransaction(transactionType: instalment.Tra" +
                    "nsactionType, amount: instalment.Amount);\r\n            }\r\n");
            
            #line 214 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
			}			
		}
	}

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\t\t\r\n\t\tpublic override  void OnDataChanged(){\r\n\t\t\tUpdateSchedules();\r\n\t\t}\r\n\t\t" +
                    "\r\n\t\tprivate void UpdateSchedules(){\t\t\r\n");
            
            #line 225 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var scheduleType in Model.ScheduleTypes)
{ if(scheduleType.IsCalculated) 
	{ 
            
            #line default
            #line hidden
            this.Write("\t\t\tSet");
            
            #line 228 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write("CalculatedProperties(");
            
            #line 228 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write("); \t\r\n");
            
            #line 229 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  }
}
            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\r\n");
            
            #line 233 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var scheduleType in Model.ScheduleTypes)
{ 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\tprivate Schedule _");
            
            #line 236 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\r\n\t\tpublic Schedule ");
            
            #line 238 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(" { \r\n\t\t\tget{\r\n\t\t\t\tif(_");
            
            #line 240 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n\t\t\t\t{\r\n\t\t\t\t\t_");
            
            #line 242 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(" = Account.GetSchedule(\"");
            
            #line 242 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn _");
            
            #line 245 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 248 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 250 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var scheduleType in Model.ScheduleTypes)
{if(scheduleType.IsCalculated) 
	{ 
            
            #line default
            #line hidden
            this.Write("\t\tprotected virtual void Set");
            
            #line 253 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write("CalculatedProperties(Schedule ");
            
            #line 253 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\r\n\t\t\t");
            
            #line 255 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".StartDate = ");
            
            #line 255 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.StartDateExpression));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t");
            
            #line 256 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".Interval = ");
            
            #line 256 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.IntervalExpression));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t");
            
            #line 257 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".EndType = ScheduleEndType.");
            
            #line 257 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.EndType.ToString()));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t");
            
            #line 258 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".BusinessDayCalculation = BusinessDayCalculation.");
            
            #line 258 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.BusinessDayCalculation.ToString()));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t");
            
            #line 259 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".Frequency = ScheduleFrequency.");
            
            #line 259 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Frequency.ToString()));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\r\n");
            
            #line 261 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  	if(scheduleType.EndType == ScheduleEndType.EndDate)
		{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 263 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".EndDate = ");
            
            #line 263 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.EndDateExpression));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 264 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  	} else if(scheduleType.EndType == ScheduleEndType.Repeats)
		{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 266 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".NumberOfRepeats = ");
            
            #line 266 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.NumberOfRepeatsExpression));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 267 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
 	} 
            
            #line default
            #line hidden
            this.Write("\t\t} \r\n");
            
            #line 269 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  } else
	{ 
            
            #line default
            #line hidden
            this.Write("    \r\n\t\tprotected virtual void Set");
            
            #line 271 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write("DefaultProperties(Schedule ");
            
            #line 271 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t{\t\t\r\n\t\t\t");
            
            #line 273 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".BusinessDayCalculation = BusinessDayCalculation.");
            
            #line 273 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.BusinessDayCalculation.ToString()));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t");
            
            #line 274 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".Frequency = ScheduleFrequency.");
            
            #line 274 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Frequency.ToString()));
            
            #line default
            #line hidden
            this.Write(";\t\t\r\n");
            
            #line 275 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"

		if(!string.IsNullOrWhiteSpace(scheduleType.StartDateExpression)){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 277 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".StartDate = ");
            
            #line 277 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.StartDateExpression));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 278 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  	}
		if(!string.IsNullOrWhiteSpace(scheduleType.EndDateExpression)){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 280 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".EndDate = ");
            
            #line 280 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.EndDateExpression));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 281 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  	} 
		if(!string.IsNullOrWhiteSpace(scheduleType.IntervalExpression)){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 283 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".Interval = ");
            
            #line 283 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.IntervalExpression));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 284 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  	} 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 285 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".EndType = ScheduleEndType.");
            
            #line 285 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.EndType.ToString()));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 286 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"

		if(!string.IsNullOrWhiteSpace(scheduleType.NumberOfRepeatsExpression)){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 288 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".NumberOfRepeats = ");
            
            #line 288 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(scheduleType.NumberOfRepeatsExpression));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 289 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  	} 
            
            #line default
            #line hidden
            this.Write("\t\t}\r\n");
            
            #line 291 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  }
} 
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\tpublic override void ProcessTransaction(Transaction transaction){\r\n\t\t\tswit" +
                    "ch (transaction.TransactionType)\r\n\t\t\t{\r\n");
            
            #line 296 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var transactionType in Model.TransactionTypes)
    {
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 298 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(transactionType.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n");
            
            #line 299 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  	foreach (TransactionRuleType rule in transactionType.TransactionRules)
        {
            if (rule.TransactionOperation == TransactionOperation.Add)
            { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 303 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rule.PositionType.Name));
            
            #line default
            #line hidden
            this.Write(".Value += transaction.Amount;\r\n");
            
            #line 304 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
 			}
            else
            { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 307 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rule.PositionType.Name));
            
            #line default
            #line hidden
            this.Write(".Value -= transaction.Amount;\r\n");
            
            #line 308 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
 			}
        } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tbreak;\r\n");
            
            #line 311 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t}\r\n\t\t}\r\n\r\n");
            
            #line 315 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var instalmentType in Model.InstalmentTypes)
{
            
            #line default
            #line hidden
            this.Write("\t\tprivate Dictionary<DateTime, Instalment> _");
            
            #line 317 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n        public Dictionary<DateTime, Instalment> ");
            
            #line 319 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write(" {\r\n            get {\r\n                if (_");
            
            #line 321 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n                {\r\n                    var instalments = Account.GetIn" +
                    "stalments(\"");
            
            #line 323 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write("\");\r\n\r\n                    if (instalments.Count() == 0)\r\n                    {\r\n" +
                    "                        Initialize");
            
            #line 327 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write("();\r\n                        instalments = Account.GetInstalments(\"");
            
            #line 328 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write("\");\r\n                    }\r\n\r\n                    _");
            
            #line 331 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write(" = instalments.ToDictionary(i => i.ValueDate);\r\n                }\r\n              " +
                    "  return _");
            
            #line 333 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n            }\r\n        }\r\n\r\n        private void Initialize");
            
            #line 337 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write("()\r\n        {\r\n            foreach (var date in ");
            
            #line 339 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.ScheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".GetAllDates())\r\n            {\r\n                Account.Instalments.Add(new Insta" +
                    "lment { InstalmentType = \"");
            
            #line 341 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write("\", TransactionType = \"");
            
            #line 341 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.TransactionType.Name));
            
            #line default
            #line hidden
            this.Write("\", ValueDate = date });\r\n            }\r\n        }\r\n\r\n        public void Calculat" +
                    "e");
            
            #line 345 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write("Instalments() {\r\n            var amount = Solver.FindFunctionZero( (value) =>this" +
                    ".GetClosingBalanceFor");
            
            #line 346 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write("Value(value), (decimal)0, (decimal)1000000000000000, (decimal) 0.01);\r\n        }\r" +
                    "\n\r\n        public decimal GetClosingBalanceFor");
            
            #line 349 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write("Value(decimal value) {\r\n\t\t\t\r\n\t\t\tSetFutureInstalmentValue(\"");
            
            #line 351 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Name));
            
            #line default
            #line hidden
            this.Write("\", ScheduledTransactionTiming.");
            
            #line 351 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.Timing.ToString()));
            
            #line default
            #line hidden
            this.Write(", value);\r\n\r\n            var lastDate = ");
            
            #line 353 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.ScheduleType.Name));
            
            #line default
            #line hidden
            this.Write(".GetAllDates().Last();\r\n\r\n            Account.Snapshot();\r\n\r\n            Forecast" +
                    "(lastDate);\r\n\r\n            var result = ");
            
            #line 359 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instalmentType.PrincipalPositionType.Name));
            
            #line default
            #line hidden
            this.Write(".Value;\r\n\r\n            Account.RestoreSnapshot();\r\n\r\n            return result;\r\n" +
                    "        }\r\n");
            
            #line 365 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("        public override void CalculateInstaments()\r\n\t\t{\r\n");
            
            #line 368 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
  foreach (var instalmentType in Model.InstalmentTypes)
{
            
            #line default
            #line hidden
            this.Write("            CalculateRedemptionsInstalments();\r\n");
            
            #line 371 "D:\Vs2010\Projects\TransactRules\TransactRules.Runtime\CodeGen\AccountClassTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\t}\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class AccountClassTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
